@import "_mixin-helpers.styl";

/*
 * Provides width and height properties for rectangle/quadrate boxes
 *
 * @argument {unit} width
 * @argument {unit} height
 */
_size(width, height=false) {
  height = height is false ? width : height;

  width: width;
  height: height;
}

/*
* Provides a concise, one-line method for setting an element’s positioning properties:
* `position`, `top`, `right`, `bottom` and `left`. Use a `null` value to “skip” an edge of the box.
*
* @argument {string} position - A CSS position value.
* @argument {list} box-edge-values - List of lengths; accepts CSS shorthand.
*
* @example stylus
*   .element {
*     @include position(relative, 0 null null 10em);
*   }
*
* // CSS Output
*   .element {
*     left: 10em;
*     position: relative;
*     top: 0;
*   }
*
* @example stylus
*   .element {
*     @include position(absolute, 0);
*   }
*
* // CSS Output
*   .element {
*     position: absolute;
*     top: 0;
*     right: 0;
*     bottom: 0;
*     left: 0;
*   }
*
* @require {function} _is-length
* @require {function} _unpack-shorthand
*/
_position(position, box-edge-values) {
  box-edge-values = _unpack-shorthand(box-edge-values);

  offsets = {
    top:    shift(box-edge-values),
    right:  shift(box-edge-values),
    bottom: shift(box-edge-values),
    left:   shift(box-edge-values)
  }

  position: position;

  for name, offset in offsets {
    if _is-length(offset) {
      {name}: offset;
    }
  }
}

_text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}